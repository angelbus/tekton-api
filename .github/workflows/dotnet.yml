name: tekton-cicd
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      push_to_docker:
        type: boolean
        description: Docker Push
      deploy_to_cloud:
        type: boolean
        description: Cloud Deployment
  
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Environment Setup
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Test
      run: dotnet test --verbosity normal
  publish:
    name: Publish
    needs: build
    runs-on: ubuntu-latest
    if: github.event.inputs.push_to_docker == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build Tekton WebAPI Image
        working-directory: ./
        run: |
          export IMAGE_VERSION=$(cat "VERSION.txt")
          echo "==============================="
          echo "App version is ${IMAGE_VERSION}"
          echo "==============================="
          
          IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/tekton-webapi
          docker build -t ${IMAGE_NAME} -f Dockerfile .
          docker tag ${IMAGE_NAME} ${IMAGE_NAME}:${IMAGER_VERSION}
          docker tag ${IMAGE_NAME} ${IMAGE_NAME}:latest
          docker push ${IMAGE_NAME}
  
  deploy:
    name: Deployment
    needs: publish
    runs-on: ubuntu-latest
    if: github.event.inputs.deploy_to_cloud == 'true'
    steps:
      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_SECRET_REGION }}
      - name: Deploy Tekton WebAPI to AWS ECS
        working-directory: ./
        run: |
          aws ecs update-service --force-new-deployment --service tekton-webapi --cluster ${{ secrets.AWS_ECS_CLUSTER }}
