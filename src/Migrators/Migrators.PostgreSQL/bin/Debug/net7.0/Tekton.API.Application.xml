<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tekton.API.Application</name>
    </assembly>
    <members>
        <member name="P:Tekton.API.Application.Common.Models.BaseFilter.AdvancedSearch">
            <summary>
            Column Wise Search is Supported.
            </summary>
        </member>
        <member name="P:Tekton.API.Application.Common.Models.BaseFilter.Keyword">
            <summary>
            Keyword to Search in All the available columns of the Resource.
            </summary>
        </member>
        <member name="P:Tekton.API.Application.Common.Models.BaseFilter.AdvancedFilter">
            <summary>
            Advanced column filtering with logical operators and query operators is supported.
            </summary>
        </member>
        <member name="M:Tekton.API.Application.Common.Persistence.IDapperRepository.QueryAsync``1(System.String,System.Object,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> using raw sql string with parameters.
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="sql">The sql string.</param>
            <param name="param">The paramters in the sql string.</param>
            <param name="transaction">The transaction to be performed.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/> of <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>.</returns>
        </member>
        <member name="M:Tekton.API.Application.Common.Persistence.IDapperRepository.QueryFirstOrDefaultAsync``1(System.String,System.Object,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Get a <typeparamref name="T"/> using raw sql string with parameters.
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="sql">The sql string.</param>
            <param name="param">The paramters in the sql string.</param>
            <param name="transaction">The transaction to be performed.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/> of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Tekton.API.Application.Common.Persistence.IDapperRepository.QuerySingleAsync``1(System.String,System.Object,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Get a <typeparamref name="T"/> using raw sql string with parameters.
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
            <param name="sql">The sql string.</param>
            <param name="param">The paramters in the sql string.</param>
            <param name="transaction">The transaction to be performed.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/> of <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:Tekton.API.Application.Common.Persistence.IRepository`1">
            <summary>
            The regular read/write repository for an aggregate root.
            </summary>
        </member>
        <member name="T:Tekton.API.Application.Common.Persistence.IReadRepository`1">
            <summary>
            The read-only repository for an aggregate root.
            </summary>
        </member>
        <member name="T:Tekton.API.Application.Common.Persistence.IRepositoryWithEvents`1">
            <summary>
            A special (read/write) repository for an aggregate root,
            that also adds EntityCreated, EntityUpdated or EntityDeleted
            events to the DomainEvents of the entities before adding,
            updating or deleting them.
            </summary>
        </member>
    </members>
</doc>
